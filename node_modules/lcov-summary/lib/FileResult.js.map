{"version":3,"sources":["../src/FileResult.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;;;;;;;IACA,UAAU,WAAV,UAAU;AACnB,aADS,UAAU,CACP,QAAQ,EAAE,WAAW,EAAE;8BAD1B,UAAU;;AAEf,YAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;AACtB,YAAI,CAAC,OAAO,GAAG,WAAW,CAAC;KAC9B;;iBAJQ,UAAU;;4BAMJ;AACX,mBAAO,IAAI,CAAC,KAAK,CAAC;SACrB;;;4BAEc;AACX,mBAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;SAC3B;;;4BAEW;AACR,mBAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;SAC7B;;;4BAEc;AACX,gBAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;AAChD,mBAAO,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;SAC1C;;;WArBQ,UAAU;;;IAuBV,cAAc,WAAd,cAAc;;;;;AAIvB,aAJS,cAAc,GAIO;YAAlB,WAAW,yDAAG,EAAE;;8BAJnB,cAAc;;AAKnB,YAAI,CAAC,YAAY,GAAG,WAAW,CAAC;KACnC;;iBANQ,cAAc;;4BAQX;AACR,mBAAO,IAAI,CAAC,YAAY,CAAC;SAC5B;;;4BAEc;AACX,gBAAI,KAAK,GAAG,CAAC,CAAC;AACd,gBAAI,QAAQ,GAAG,CAAC,CAAC;AACjB,gBAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,UAAU,EAAI;AAC7B,qBAAK,IAAI,UAAU,CAAC,KAAK,CAAC;AAC1B,wBAAQ,IAAI,UAAU,CAAC,QAAQ,CAAC;aACnC,CAAC,CAAC;AACH,gBAAI,QAAQ,GAAG,QAAQ,GAAG,KAAK,GAAG,GAAG,CAAC;AACtC,mBAAO,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;SAC1C;;;WArBQ,cAAc","file":"FileResult.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nexport class FileResult {\n    constructor(fileName, linesResult) {\n        this._name = fileName;\n        this._result = linesResult;\n    }\n\n    get fileName() {\n        return this._name;\n    }\n\n    get executed() {\n        return this._result.hit;\n    }\n\n    get total() {\n        return this._result.found;\n    }\n\n    get coverage() {\n        let coverage = this.executed / this.total * 100;\n        return parseFloat(coverage.toFixed(2));\n    }\n}\nexport class CoverageResult {\n    /**\n     * @param {FileResult[]} fileResults\n     */\n    constructor(fileResults = []) {\n        this._fileResults = fileResults;\n    }\n\n    get files() {\n        return this._fileResults;\n    }\n\n    get coverage() {\n        let total = 0;\n        let executed = 0;\n        this.files.forEach(fileResult => {\n            total += fileResult.total;\n            executed += fileResult.executed;\n        });\n        let coverage = executed / total * 100;\n        return parseFloat(coverage.toFixed(2));\n    }\n}"]}