// LICENSE : MIT
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FileResult = exports.FileResult = (function () {
    function FileResult(fileName, linesResult) {
        _classCallCheck(this, FileResult);

        this._name = fileName;
        this._result = linesResult;
    }

    _createClass(FileResult, [{
        key: "fileName",
        get: function get() {
            return this._name;
        }
    }, {
        key: "executed",
        get: function get() {
            return this._result.hit;
        }
    }, {
        key: "total",
        get: function get() {
            return this._result.found;
        }
    }, {
        key: "coverage",
        get: function get() {
            var coverage = this.executed / this.total * 100;
            return parseFloat(coverage.toFixed(2));
        }
    }]);

    return FileResult;
})();

var CoverageResult = exports.CoverageResult = (function () {
    /**
     * @param {FileResult[]} fileResults
     */

    function CoverageResult() {
        var fileResults = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

        _classCallCheck(this, CoverageResult);

        this._fileResults = fileResults;
    }

    _createClass(CoverageResult, [{
        key: "files",
        get: function get() {
            return this._fileResults;
        }
    }, {
        key: "coverage",
        get: function get() {
            var total = 0;
            var executed = 0;
            this.files.forEach(function (fileResult) {
                total += fileResult.total;
                executed += fileResult.executed;
            });
            var coverage = executed / total * 100;
            return parseFloat(coverage.toFixed(2));
        }
    }]);

    return CoverageResult;
})();
//# sourceMappingURL=FileResult.js.map