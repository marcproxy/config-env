{"version":3,"sources":["../src/Writer.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;AAGb,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;;IACzB,MAAM;AACR,aADE,MAAM,GACsB;YAAlB,WAAW,yDAAG,EAAE;;8BAD1B,MAAM;;AAEJ,YAAI,CAAC,OAAO,GAAG,WAAW,CAAC;KAC9B;;iBAHC,MAAM;;8BASF,IAAI,EAAE;AACR,gBAAI,CAAC,OAAO,IAAI,IAAI,CAAC;SACxB;;;gCAEO,IAAI,EAAE;AACV,gBAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACjB,gBAAI,CAAC,QAAQ,EAAE,CAAC;SACnB;;;mCAEU;AACP,gBAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SACpB;;;4BAfY;AACT,mBAAO,IAAI,CAAC,OAAO,CAAC;SACvB;;;WAPC,MAAM;;;IAuBC,YAAY,WAAZ,YAAY;AACrB,aADS,YAAY,CACT,OAAO,EAAE;8BADZ,YAAY;;AAEjB,YAAI,CAAC,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;AAC3B,YAAI,CAAC,OAAO,GAAG,sBAAa,EAAE,EAAE;AAC5B,oBAAQ,EAAE,IAAI;AACd,wBAAY,EAAE,IAAI;SACrB,EAAE,OAAO,CAAC,CAAC;KACf;;;;;AAAA;iBAPQ,YAAY;;oCAYT,MAAM,EAAE;;;AAChB,gBAAI,CAAC,MAAM,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC;AAClD,kBAAM,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,UAAU,EAAI;AAC/B,sBAAK,gBAAgB,CAAC,UAAU,CAAC,CAAC;aACrC,CAAC,CAAC;AACH,gBAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;;AAE9C,gBAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;AACvB,gBAAI,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAkB,GAAG,QAAQ,CAAC,CAAC;AACnD,gBAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;AACvB,mBAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;SAC7B;;;yCAEgB,IAAI,EAAE;AACnB,gBAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC5C,gBAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC5E;;;iCAEQ,QAAQ,EAAE;AACf,gBAAI,OAAO,GAAG,eAzDb,QAAQ,EAyDY,SAAS,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC5C,gBAAI,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;AACvC,uBAAO,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;aAC/B,MAAM,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;AACzC,uBAAO,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;aAC7B,MAAM;AACH,uBAAO,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;aAChC;SACJ;;;0CAE0B;8CAAR,MAAM;AAAN,sBAAM;;;AACrB,gBAAI,MAAM,GAAG,eApEZ,QAAQ,EAoEW,iBAAiB,EAAE,MAAM,CAAC,CAAC;AAC/C,gBAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SAC/B;;;WA5CQ,YAAY","file":"Writer.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { vsprintf as format } from 'sprintf-js';\nimport ObjectAssign  from \"object.assign\";\nconst chalk = require('chalk');\nclass Writer {\n    constructor(defaultText = \"\") {\n        this._output = defaultText;\n    }\n\n    get output() {\n        return this._output;\n    }\n\n    write(text) {\n        this._output += text;\n    }\n\n    writeln(text) {\n        this.write(text);\n        this.writeEOL();\n    }\n\n    writeEOL() {\n        this.write(\"\\n\");\n    }\n}\n\nexport class ReportWriter {\n    constructor(options) {\n        this.writer = new Writer();\n        this.options = ObjectAssign({}, {\n            critical: 30.0,\n            satisfactory: 70.0\n        }, options);\n    }\n\n    /**\n     * @param {CoverageResult} result\n     */\n    writeReport(result) {\n        this.writer.writeln(\"\\nCode Coverage Results:\\n\");\n        result.files.forEach(fileResult => {\n            this.formatFileResult(fileResult);\n        });\n        let coverage = this.colorize(result.coverage);\n\n        this.writer.writeEOL();\n        this.writer.writeln(\"Total Coverage: \" + coverage);\n        this.writer.writeEOL();\n        return this.writer.output;\n    }\n\n    formatFileResult(file) {\n        let coverage = this.colorize(file.coverage);\n        this.writeFileResult(coverage, file.executed, file.total, file.fileName);\n    }\n\n    colorize(coverage) {\n        let percent = format('%6.2f%%', [coverage]);\n        if (coverage >= this.options.satisfactory) {\n            return chalk.green(percent);\n        } else if (coverage < this.options.critical) {\n            return chalk.red(percent);\n        } else {\n            return chalk.yellow(percent);\n        }\n    }\n\n    writeFileResult(...values) {\n        let output = format('%s (%2d/%2d) %s', values);\n        this.writer.writeln(output);\n    }\n}"]}