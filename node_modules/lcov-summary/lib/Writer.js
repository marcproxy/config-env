// LICENSE : MIT
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ReportWriter = undefined;

var _sprintfJs = require("sprintf-js");

var _object = require("object.assign");

var _object2 = _interopRequireDefault(_object);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var chalk = require('chalk');

var Writer = (function () {
    function Writer() {
        var defaultText = arguments.length <= 0 || arguments[0] === undefined ? "" : arguments[0];

        _classCallCheck(this, Writer);

        this._output = defaultText;
    }

    _createClass(Writer, [{
        key: "write",
        value: function write(text) {
            this._output += text;
        }
    }, {
        key: "writeln",
        value: function writeln(text) {
            this.write(text);
            this.writeEOL();
        }
    }, {
        key: "writeEOL",
        value: function writeEOL() {
            this.write("\n");
        }
    }, {
        key: "output",
        get: function get() {
            return this._output;
        }
    }]);

    return Writer;
})();

var ReportWriter = exports.ReportWriter = (function () {
    function ReportWriter(options) {
        _classCallCheck(this, ReportWriter);

        this.writer = new Writer();
        this.options = (0, _object2.default)({}, {
            critical: 30.0,
            satisfactory: 70.0
        }, options);
    }

    /**
     * @param {CoverageResult} result
     */

    _createClass(ReportWriter, [{
        key: "writeReport",
        value: function writeReport(result) {
            var _this = this;

            this.writer.writeln("\nCode Coverage Results:\n");
            result.files.forEach(function (fileResult) {
                _this.formatFileResult(fileResult);
            });
            var coverage = this.colorize(result.coverage);

            this.writer.writeEOL();
            this.writer.writeln("Total Coverage: " + coverage);
            this.writer.writeEOL();
            return this.writer.output;
        }
    }, {
        key: "formatFileResult",
        value: function formatFileResult(file) {
            var coverage = this.colorize(file.coverage);
            this.writeFileResult(coverage, file.executed, file.total, file.fileName);
        }
    }, {
        key: "colorize",
        value: function colorize(coverage) {
            var percent = (0, _sprintfJs.vsprintf)('%6.2f%%', [coverage]);
            if (coverage >= this.options.satisfactory) {
                return chalk.green(percent);
            } else if (coverage < this.options.critical) {
                return chalk.red(percent);
            } else {
                return chalk.yellow(percent);
            }
        }
    }, {
        key: "writeFileResult",
        value: function writeFileResult() {
            for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {
                values[_key] = arguments[_key];
            }

            var output = (0, _sprintfJs.vsprintf)('%s (%2d/%2d) %s', values);
            this.writer.writeln(output);
        }
    }]);

    return ReportWriter;
})();
//# sourceMappingURL=Writer.js.map